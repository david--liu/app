#!/usr/bin/env ruby

require_relative 'git_utils.rb'


def get_specific_remote_branch_name_from(remote_name)
  run_git_command("fetch #{remote_name}")
  branches = run_git_command("branch --remote",true).split("\n").select{|item| %r/#{remote_name}/ =~ item}.map{|item| item.gsub(%r/#{remote_name}\//,"").strip}
  pick_item_from(branches,"Choose Branch:")
end

def get_all_available_non_origin_remotes
 run_git_command("remote",true).split("\n").select{|remote| /origin/ !~ remote}
end

def choose_remote(remotes)
  pick_item_from(remotes,"Choose remote:")
end

def update_to_specific_branch_on(remote_name)
  run_git_command("add -A")
  run_git_command('commit -m "Updated"')
  run_git_command("checkout clean")
  specific_branch = get_specific_remote_branch_name_from(remote_name)

  new_branch = "pull_#{remote_name}_#{specific_branch}"
  run_git_command("checkout -b #{new_branch}")
  run_git_command("checkout #{new_branch}")
  run_git_command("pull #{remote_name} #{specific_branch}")
end

%w[master clean].each{|branch| exit_if_on_branch branch}

remote_name = ARGV.shift
remote_name = choose_remote(get_all_available_non_origin_remotes) if remote_name == nil
update_to_specific_branch_on(remote_name) unless remote_name.empty?




